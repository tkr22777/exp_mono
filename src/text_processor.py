"""
Text Processor Module

This module provides functions for processing text using a two-step approach:
1. Create a plan based on the text (using plan_creator module)
2. Execute the plan with AI assistance
"""
from typing import Tuple

from pydantic import BaseModel, Field

from src.ai_client import default_client
from src.plan_creator import ProcessingPlan, create_plan


class ProcessingResult(BaseModel):
    """Model representing the results of text processing."""

    title: str = Field(description="Title for the text processing result")
    ai_response: str = Field(description="Response generated by AI LLM")
    status: str = Field(default="executed", description="Status of the processing")


def get_ai_response(text: str) -> str:
    """
    Get a response from an AI language model based on the input text.

    Args:
        text: The input text to send to the AI model

    Returns:
        Response from the AI model
    """
    prompt = f"Please provide a brief analysis of the following text: {text}"
    return default_client.generate_response(prompt)


def execute_plan(plan: ProcessingPlan, text: str) -> ProcessingResult:
    """
    Execute the processing plan on the text, including AI response generation.

    Args:
        plan: The plan to execute
        text: The input text to process

    Returns:
        Results of the executed plan
    """
    ai_response = get_ai_response(text)

    results = ProcessingResult(
        title=plan.title,
        ai_response=ai_response,
    )

    return results


def process_text(text: str) -> Tuple[ProcessingPlan, ProcessingResult]:
    """
    Process the input text using the two-step approach:
    1. Create a plan
    2. Execute the plan with AI assistance

    Args:
        text: The input text to process

    Returns:
        The plan and results from processing
    """
    plan = create_plan(text)
    results = execute_plan(plan, text)
    return plan, results
